#---------------------------------- Подключение библиотек
import numpy
from cvxopt.modeling import variable, op

from datetime import datetime
import time


#---------------------------------- Функция
def count(uslovie_1_stroki, 
          uslovie_2_stroki, 
          uslovie_3_stroki, 
          uslovie_1_stolbca, 
          uslovie_2_stolbca, 
          uslovie_3_stolbca, 
          funkciya):  
         
         """ Функция принимает на вход ограничения и функцию для минимизации.
         Затем минимизирует функцию и возвращает ответ и матрицу.
         """
         
         x_non_negative = (x >= 0) # условие неотрицательности значений
         
         problem = op (
                  funkciya, 
                  [uslovie_1_stroki, 
                   uslovie_2_stroki, 
                   uslovie_3_stroki, 
                   uslovie_1_stolbca, 
                   uslovie_2_stolbca, 
                   uslovie_3_stolbca, 
                   x_non_negative]
         ) 
         
         problem.solve (solver = 'glpk')   
         print ("Минимальная стоимость закупки -", problem.objective.value()[0])
         print ("Матрица закупок:")
         for i in [1, 4, 7]:
                  print("|", x.value[i - 1], "|", x.value[i], "|", x.value[i +1 ], "|")
                  
                  
         
#---------------------------------- Ввод векторов и матрицы
print ('Введите вектор производства')
proizvostvo = [float(s) for s in input().split()]

print ('Введите вектор потребности')
potrebnost  = [float(s) for s in input().split()]

print ('Введите исходную матрицу')
ishodnaya_matrica = [[float(j) for j in input().split()] for i in range(3)]

start_time = datetime.now()

#---------------------------------- Значения производства и потребности сходятся
if sum(proizvostvo) == sum (potrebnost): 
         
         x = variable(12, 'x')
         
         funkciya = (
                  ishodnaya_matrica[0][0] * x[0] + 
                  ishodnaya_matrica[0][1] * x[1] + 
                  ishodnaya_matrica[0][2] * x[2] +
                  ishodnaya_matrica[1][0] * x[3] + 
                  ishodnaya_matrica[1][1] * x[4] + 
                  ishodnaya_matrica[1][2] * x[5] +
                  ishodnaya_matrica[2][0] * x[6] + 
                  ishodnaya_matrica[2][1] * x[7] + 
                  ishodnaya_matrica[2][2] * x[8]
         ) #задаём функцию
         
         uslovie_1_stroki = (
                  x[0] + x[1] + x[2] <= proizvostvo[0]
                  ) # условие для 1 строки 
         
         uslovie_2_stroki = (
                  x[3] + x[4] + x[5] <= proizvostvo[1]
                  ) # условие для 2 строки 
         
         uslovie_3_stroki = (
                  x[6] + x[7] + x[8] <= proizvostvo[2]
                  ) # условие для 3 строки 
         
         uslovie_1_stolbca = (
                  x[0] + x[3] + x[6] == potrebnost[0]
                  ) # условия для 1 столбца
         
         uslovie_2_stolbca = (
                  x[1] + x[4] + x[7] == potrebnost[1]
                  ) # условия для 2 столбца
         
         uslovie_3_stolbca = (
                  x[2] + x[5] + x[8] == potrebnost[2]
                  ) # условия для 3 столбца
         
         count (uslovie_1_stroki, 
                uslovie_2_stroki, 
                uslovie_3_stroki, 
                uslovie_1_stolbca, 
                uslovie_2_stolbca, 
                uslovie_3_stolbca, 
                funkciya) # вызываем фунцкию

#---------------------------------- Перепроизводство         
elif sum(proizvostvo) > sum (potrebnost):
         
         x = variable(12, 'x')
         
         potrebnost.append (sum (potrebnost) - sum(proizvostvo)) #задаём фиктивный столбец
         ishodnaya_matrica[0].append (0)
         ishodnaya_matrica[1].append (0)
         ishodnaya_matrica[2].append (0)
         
         funkciya = (
                  ishodnaya_matrica[0][0] * x[0] + 
                  ishodnaya_matrica[0][1] * x[1] + 
                  ishodnaya_matrica[0][2] * x[2] + 
                  ishodnaya_matrica[0][3] * x[3] +
                  ishodnaya_matrica[1][0] * x[4] + 
                  ishodnaya_matrica[1][1] * x[5] + 
                  ishodnaya_matrica[1][2] * x[6] + 
                  ishodnaya_matrica[1][3] * x[7] +
                  ishodnaya_matrica[2][0] * x[8] + 
                  ishodnaya_matrica[2][1] * x[9] + 
                  ishodnaya_matrica[2][2] * x[10] + 
                  ishodnaya_matrica[2][3] * x[11]
         ) #задаём функцию
         
         uslovie_1_stroki = (
                  x[0] + x[1] + x[2] + x[3] <= proizvostvo[0]
                  ) # условие для 1 строки 
         
         uslovie_2_stroki = (
                  x[4] + x[5] + x[6] + x[7] <= proizvostvo[1]
                  ) # условие для 2 строки
         
         uslovie_3_stroki = (
                  x[8] + x[9] + x[10] + x[11] <= proizvostvo[2]
                  ) # условие для 3 строки
         
         uslovie_1_stolbca = (
                  x[0] + x[4] + x[8] == potrebnost[0]
                  ) # условие для 1 столбца
         
         uslovie_2_stolbca = (
                  x[1] + x[5] + x[9] == potrebnost[1]
                  ) # условие для 2 столбца
         
         uslovie_3_stolbca = (
                  x[2] + x[6] + x[10] == potrebnost[2]
                  ) # условие для 3 столбца
         
         count (uslovie_1_stroki, 
                uslovie_2_stroki, 
                uslovie_3_stroki, 
                uslovie_1_stolbca, 
                uslovie_2_stolbca, 
                uslovie_3_stolbca, 
                funkciya) # вызываем фунцкию

#---------------------------------- Дефицит         
else:
         x = variable(12, 'x')
         
         proizvostvo.append (sum (proizvostvo) - sum(potrebnost)) #задаём фиктивную строчку
         ishodnaya_matrica.append ([0,0,0])
         
         funkciya = (
                  ishodnaya_matrica[0][0] * x[0] + 
                  ishodnaya_matrica[0][1] * x[1] + 
                  ishodnaya_matrica[0][2] * x[2] +
                  ishodnaya_matrica[1][0] * x[3] + 
                  ishodnaya_matrica[1][1] * x[4] + 
                  ishodnaya_matrica[1][2] * x[5] +
                  ishodnaya_matrica[2][0] * x[6] + 
                  ishodnaya_matrica[2][1] * x[7] + 
                  ishodnaya_matrica[2][2] * x[8] +
                  ishodnaya_matrica[3][0] * x[9] + 
                  ishodnaya_matrica[3][1] * x[10] + 
                  ishodnaya_matrica[3][2] * x[11]
         ) #задаём функцию
         
         uslovie_1_stroki = (
                  x[0] + x[1] + x[2] == proizvostvo[0]
                  ) # условие для 1 строки 
         
         uslovie_2_stroki = (
                  x[3] + x[4] + x[5] == proizvostvo[1]
                  ) # условие для 2 строки 
         
         uslovie_3_stroki = (
                  x[6] + x[7] + x[8] == proizvostvo[2]
                  ) # условие для 3 строки 
         
         uslovie_1_stolbca = (
                  x[0] + x[3] + x[6] + x[9] <= potrebnost[0]
                  ) # условия для 1 столбца
         
         uslovie_2_stolbca = (
                  x[1] + x[4] + x[7] + x[10] <= potrebnost[1]
                  ) # условия для 2 столбца
         
         uslovie_3_stolbca = (
                  x[2] + x[5] + x[8] + x[11] <= potrebnost[2]
                  ) # условия для 3 столбца
         
         count (uslovie_1_stroki, 
                uslovie_2_stroki, 
                uslovie_3_stroki, 
                uslovie_1_stolbca, 
                uslovie_2_stolbca, 
                uslovie_3_stolbca, 
                funkciya) # вызываем фунцкию
         
print(datetime.now() - start_time)
         
