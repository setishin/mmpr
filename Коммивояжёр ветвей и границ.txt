import random #импортируем библиотеку для ввода случайным образом

def minmin(lst, myindex):
    '''
    Функция нахождения минимального элемента, исключая текущий элемент
    '''
    return min(x for idx, x in enumerate(lst) if idx != myindex)

def deldel(matrix, index1, index2):
    '''
    функция удаления нужной строки и столбцах
    '''
    del matrix[index1]
    for i in matrix:
        del i[index2]
    return matrix


#--------------------------------------
#Обозначение переменных
matrix = []
H = 0
PathLenght = 0
Str = []
Stb = []
res = []
result = []
StartMatrix = []


#--------------------------------------
#Определяемся с вводом данных
way = input('Введите способ ввода данных (ручной, рандом_сим, рандом_несим, файл): ')

if way == 'ручной':
    #Вводим количество городов и матрицу от руки
    
    n = int(input('Введите количество городов: '))
    print ('Введите матрицу')
    for i in range(n): matrix.append(list(map(float, input().split())))
    for i in range(n): matrix[i][i] = float('inf') 
    
    
elif way == 'рандом_несим' or way == 'рандом_сим':
    #Генерируем входные данные рандомом
    
    n = random.randint (3, 7)
    matrix = [[random.randint(0, 50) for i in range(n)] for j in range(n)]
    for i in range(n): matrix[i][i] = float('inf')    
    
    if way == 'рандом_сим':
        for i in range(n):
            for j in range (i + 1, n): 
                matrix [j][i] = matrix [i][j]
		
    print ()
    print ('Сгенерированное количество городов: ', n)
    print ()
    print ('Сгенерированная матрица: ')
    for row in matrix: print (*row)
    
    
    
elif way == 'файл':
    #Считываем исходные данные из файла
    
    name = input('Сохраните ваш файл в папку с этой программой и введите его имя: ')
    file = open(name, "r")
    matrix = [] 
    
    for line in file: matrix.append([float(x) for x in line.split()])
    n = len(matrix[0])
    for i in range(n): matrix[i][i] = float('inf') 
    print ('Считанная матрица: ')
    for row in matrix: print (*row)
    file.close()

print()
print('-------------------------------')
print()
	    
#--------------------------------------
#Инициализируем массивы для сохранения индексов
for i in range(n):
    Str.append(i)
    Stb.append(i)
    

#--------------------------------------	
#Сохраняем изначальную матрицу
for i in range(n):
    StartMatrix.append(matrix[i].copy())
    

#--------------------------------------
#Редуцируем
while True:
    #Вычитаем минимальный элемент в строках
    for i in range(len(matrix)):
        temp = min(matrix[i])
        H += temp
        for j in range(len(matrix)):
            matrix[i][j] -= temp

    #Вычитаем минимальный элемент в столбцах    
    for i in range(len(matrix)):
        temp = min(row[i] for row in matrix)
        H += temp
        for j in range(len(matrix)):
            matrix[j][i] -= temp
	
    #Оцениваем нулевые клетки и ищем нулевую клетку с максимальной оценкой
    NullMax = 0
    index1 = 0
    index2 = 0
    tmp = 0
    for i in range(len(matrix)):
        for j in range(len(matrix)):
            if matrix[i][j] == 0:
                tmp = minmin(matrix[i], j) + minmin((row[j] for row in matrix), i)
                if tmp >= NullMax:
                    NullMax = tmp
                    index1 = i
                    index2 = j

    #Находим нужный нам путь, записываем его в res и удаляем все ненужное
    res.append(Str[index1] + 1)
    res.append(Stb[index2] + 1)
	
    oldIndex1 = Str[index1]
    oldIndex2 = Stb[index2]
    if oldIndex2 in Str and oldIndex1 in Stb:
        NewIndex1 = Str.index(oldIndex2)
        NewIndex2 = Stb.index(oldIndex1)
        matrix[NewIndex1][NewIndex2] = float('inf')
    del Str[index1]
    del Stb[index2]
    matrix = deldel(matrix, index1, index2)
    for i in matrix: print (*i)
    print ()
    if len(matrix) == 1: break
    

#--------------------------------------	
#Формируем порядок пути
for i in range(0, len(res) - 1, 2):
	if res.count(res[i]) < 2:
		result.append(res[i])
		result.append(res[i + 1])
		
for i in range(0, len(res) - 1, 2):
	for j in range(0, len(res) - 1, 2):
		if result[len(result) - 1] == res[j]:
			result.append(res[j])
			result.append(res[j + 1])
			
			


#--------------------------------------
#Считаем длину пути
for i in range(0,len(result)-1,2):
    if i==len(result)-2:
        PathLenght+=StartMatrix[result[i]-1][result[i+1]-1]
        PathLenght+=StartMatrix[result[i+1]-1][result[0]-1]
    else: PathLenght+=StartMatrix[result[i]-1][result[i+1]-1]
    
    
    
#--------------------------------------
#Выводим путь
print ()
print("Путь:")
index = 1 
while index < len(result): 
    if result[index] in result[ : index]: result.pop(index)
    else: index += 1 

result.append (result[0])     
print(*result, sep = " --> ")


#--------------------------------------
#Выводим длину пути
print()
print("Стоимость:")	
print(PathLenght)




