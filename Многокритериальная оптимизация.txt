def paretto (matrica123, vector_napr):
    
    
    '''
    Функция пареттооптимального решения
    
    На вход: матрица 2 столбцов, вектор направлений
    На выход: массив оптимальных точек Паретто
    '''
    
    otvet = []
    
    #----------------------------------------------------- 
    if vector_napr[0] == 'max' and vector_napr[1] == 'max':
    
        for i in range (len(matrica123)):
            k = 1
            for j in range (len(matrica123)):
                if i != j:
                    if ((matrica123[j][0] > matrica123[i][0]) and (matrica123[j][1] >= matrica123[i][1])) or ((matrica123[j][0] >= matrica123[i][0]) and (matrica123[j][1] > matrica123[i][1])):
                        k = 0
                        break
            if k == 1:
                otvet.append (matrica123[i])
    
    #----------------------------------------------------- 
    elif vector_napr[0] == 'min' and vector_napr[1] == 'min':
        for i in range (len(matrica123)):
                    k = 1
                    for j in range (len(matrica123)):
                        if i != j:
                            if ((matrica123[j][0] < matrica123[i][0]) and (matrica123[j][1] <= matrica123[i][1])) or ((matrica123[j][0] <= matrica123[i][0]) and (matrica123[j][1] < matrica123[i][1])):
                                k = 0
                                break
                    if k == 1:
                        otvet.append (matrica123[i])        
    
    #----------------------------------------------------- 
    elif vector_napr[0] == 'max' and vector_napr[1] == 'min':
        for i in range (len(matrica123)):
                    k = 1
                    for j in range (len(matrica123)):
                        if i != j:
                            if ((matrica123[j][0] > matrica123[i][0]) and (matrica123[j][1] <= matrica123[i][1])) or ((matrica123[j][0] >= matrica123[i][0]) and (matrica123[j][1] < matrica123[i][1])):
                                k = 0
                                break
                    if k == 1:
                        otvet.append (matrica123[i])  
                        
    #----------------------------------------------------- 
    elif vector_napr[0] == 'min' and vector_napr[1] == 'max':
        for i in range (len(matrica123)):
                    k = 1
                    for j in range (len(matrica123)):
                        if i != j:
                            if ((matrica123[j][0] < matrica123[i][0]) and (matrica123[j][1] >= matrica123[i][1])) or ((matrica123[j][0] <= matrica123[i][0]) and (matrica123[j][1] > matrica123[i][1])):
                                k = 0
                                break
                    if k == 1:
                        otvet.append (matrica123[i])    
            
                
    return (otvet)



#----------------------------------------------------- 
def lin_svertka(matrica123, vector_napr, vector_kf):
    
    '''
    Функция линейной свёртки (2(а))
    
    На вход: матрица любого количества столбцов, вектор направлений, вектор коэффициентов
    На выход: оптимальная точка
    '''
    
    vector_svertka = []
    
    for i in range(len(vector_napr)):
        if vector_napr[i] == 'min':
            vector_kf[i] = vector_kf[i] * (-1)
        
    for i in range(len(matrica123)):
        s = 0
        
        for j in range(len(matrica123[i])):
            s = s + matrica123[i][j] * vector_kf[j]
        vector_svertka.append (s)
    
    return ('Точка №' + 
            str(matrica123.index(matrica123[vector_svertka.index(max(vector_svertka))]) + 1) + 
            ' ' + 
            str(matrica123[vector_svertka.index(max(vector_svertka))]))



#-----------------------------------------------------   
def lin_svertka_paretto(matrica123):
    
    '''
    Функция линейной свёртки (Паретто) для двух параметров (макс/макс)
    
    На вход: матрица из двух столбцов, только максимизация
    На выход: список списков точек для поверхности Паретто
    '''
    
    matrica_svertka = []
    matrica_svertka_1 = []
    indind = []
    otvet = []
    
    for i in range(len(matrica123)):
        for j in range (0, 11):
            matrica_svertka.append (matrica123[i][0] * (j / 10) + matrica123[i][1] * (1 - (j / 10)))
            
    for i in range(0, len(matrica_svertka), 11):
        matrica_svertka_1.append (matrica_svertka[i : i + 11])     
        
    matrica_svertka_1 = [[matrica_svertka_1[j][i] for j in range(len(matrica_svertka_1))] for i in range (len(matrica_svertka_1[0]))]
    
    for i in matrica_svertka_1:
        indind.append(i.index(max(i)))
        
    indind = list(set(indind))
    for i in indind:
        otvet.append (matrica123[i])
            
    return (otvet)



#----------------------------------------------------- 
def ideal_tochka (matrica):
    
    '''
    Функция идеальной точки
    
    На вход: матрица из любого количества столбцов, только максимизация
    На выход: оптимальная точка (её координаты)
    '''
    
    lnln = len(matrica)
    matrica = [[matrica[j][i] for j in range(len(matrica))] for i in range (len(matrica[0]))]
    vector_ideal = []
    matrica_norm = []
    matrica_norm_1 = []
    vector_rasst = []
    
    
    for i in range(len(matrica)):
        
        vector_ideal.append (1.5 * max(matrica[i]))

        for j in range (len(matrica[i])):
            matrica_norm.append (((matrica[i][j] - vector_ideal[i]) / vector_ideal[i]) ** 2)
            
    for i in range(0, len(matrica_norm), lnln):
        matrica_norm_1.append (matrica_norm[i : i + lnln])   
        
    matrica_norm_1 = [[matrica_norm_1[j][i] for j in range(len(matrica_norm_1))] for i in range (len(matrica_norm_1[0]))]
    matrica = [[matrica[j][i] for j in range(len(matrica))] for i in range (len(matrica[0]))]
    
    for i in matrica_norm_1:
        vector_rasst.append (sum(i) ** 0.5)
    
    return (matrica[vector_rasst.index(min(vector_rasst))])



#----------------------------------------------------- 
def control_pokazat (matrica):
    
    '''
    Функция контрольных показателей
    
    На вход: матрица из любого количества столбцов, только максимизация
    На выход: оптимальная точка (её координаты)
    '''
    
    matrica_bez_vibrosov = []
    matrica_norm = []
    matrica_norm_1 = []
    vector_otvetov = []
    vector_porog = []
    
    matrica = [[matrica[j][i] for j in range(len(matrica))] for i in range (len(matrica[0]))]
    for i in matrica:
        vector_porog.append (min(i) + 1 + (min(i) + 1) * 0.1)
    matrica = [[matrica[j][i] for j in range(len(matrica))] for i in range (len(matrica[0]))]
    
    for i in range(len(matrica)):
        for j in range (len(matrica[i])):
            matrica_norm.append (matrica[i][j] / vector_porog[j])
            
    for i in range(0, len(matrica_norm), len(vector_porog)):
        matrica_norm_1.append (matrica_norm[i : i + len(vector_porog)])     
    
    for i in range(len(matrica_norm_1)):
        
        m = 0
        for j in range (len(matrica_norm_1[i])):
            if matrica_norm_1[i][j] < 1:
                m = m + 1
           
        if m == 0:
            matrica_bez_vibrosov.append (matrica_norm_1[i])
    
    for i in range(len(matrica_bez_vibrosov)):
        vector_otvetov.append (min(matrica_bez_vibrosov[i]))
    
    return (matrica[vector_otvetov.index(max(vector_otvetov))])


        
#-----------------------------------------------------             
matrica123 = [[12, 12], 
           [9, 12], 
           [12, 5], 
           [1, 10], 
           [10, 2], 
           [7, 7], 
           [6, 13], 
           [14, 0], 
           [0, 12], 
           [13, 10], 
           [5, 4], 
           [12, 6], 
           [2, 15], 
           [2, 5], 
           [9, 12], 
           [1, 14]]
           
matrica = [[12, 12, 4.6, 80, 7, 24, 10.2], 
           [9,12,5.4,81,1,16,15], 
           [12,5,3.9,75,3,19,8.8], 
           [1,10,4.9,63,21,36,10],
           [10,2,4.3,66,20,35,9.9],
           [7,7,4.5,86,18,35,11.5],
           [6,13,5.5,79,5,22,8.6],
           [14,0,5.5,61,9,26,11.4],
           [0,12,3.9,63,5,22,11.8],
           [13,10,5.5,65,21,36,12.2],
           [5,4,3.3,86,17,31,11.1],
           [12,6,2.6,84,17,33,10.8],
           [2,15,3.5,59,15,30,7.1],
           [2,5,4.2,69,6,23,6.8],
           [9,12,5.1,83,7,24,7.8],
           [1,14,4.5,65,5,19,10.5]]

matricaxxx = [[12, 12, 4.6, 80, 7], 
           [9,12,5.4,81,1], 
           [12,5,3.9,75,3], 
           [1,10,4.9,63,21],
           [10,2,4.3,66,20],
           [7,7,4.5,86,18],
           [6,13,5.5,79,5],
           [14,0,5.5,61,9],
           [0,12,3.9,63,5],
           [13,10,5.5,65,21],
           [5,4,3.3,86,17],
           [12,6,2.6,84,17],
           [2,15,3.5,59,15],
           [2,5,4.2,69,6],
           [9,12,5.1,83,7],
           [1,14,4.5,65,5]]

vector_napr = ['min', 'max']
vector_kf = [0.7, 0.3]            


#-----------------------------------------------------
print ()
print ('Пареттопотимальное решение (№ 1):')
print(paretto (matrica123, vector_napr))   
print ()

print ('Оптимальное значение при линейной свёртке (№ 2а)')
print (lin_svertka(matrica123, vector_napr, vector_kf))
print ()

print ('Набор точек поверхности Паретто после линейной свёртки (№ 2в):')
print (lin_svertka_paretto(matrica123))
print ()

print ('Метод идеальной точки (№ 3):')
print (ideal_tochka (matrica))
print ()

print ('Метод контрольных показателей (доп. задание):')
print (control_pokazat (matricaxxx))


